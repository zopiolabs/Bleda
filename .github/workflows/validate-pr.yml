name: Validate PR

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  # Quick validation checks that should fail fast
  quick-checks:
    name: Quick Validations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comparisons

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check commit messages
        run: |
          # Get all commits in this PR
          commits=$(git log --format="%s" origin/main..HEAD)
          
          # Check if commits follow conventional format
          invalid_commits=""
          while IFS= read -r commit; do
            if ! echo "$commit" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: .+"; then
              invalid_commits="${invalid_commits}\n  - ${commit}"
            fi
          done <<< "$commits"
          
          if [ -n "$invalid_commits" ]; then
            echo "‚ùå Invalid commit messages found:"
            echo -e "$invalid_commits"
            echo ""
            echo "Please use conventional commit format: type(scope): description"
            exit 1
          fi
          
          echo "‚úÖ All commit messages follow conventional format"

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: quick-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npm run type-check

      - name: Check for console.log statements
        run: |
          # Exclude node_modules and dist directories
          if grep -r "console\.log" --include="*.ts" --include="*.js" --exclude-dir=node_modules --exclude-dir=dist .; then
            echo "‚ùå Found console.log statements. Please remove them before merging."
            exit 1
          fi
          echo "‚úÖ No console.log statements found"

      - name: Security audit
        run: |
          npm audit --audit-level=high || {
            echo "‚ö†Ô∏è Security vulnerabilities found. Please review and fix if possible."
            # Don't fail the build for now, just warn
          }

  # Build verification across Node versions
  build-matrix:
    name: Build (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: quick-checks
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Check build output
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist directory not found"
            exit 1
          fi
          
          # Check for expected files
          expected_files=("assets" "index.html")
          for file in "${expected_files[@]}"; do
            if [ ! -e "dist/$file" ]; then
              echo "‚ùå Build failed: dist/$file not found"
              exit 1
            fi
          done
          
          echo "‚úÖ Build successful with all expected files"

  # Bundle size and performance checks
  performance:
    name: Performance Checks
    runs-on: ubuntu-latest
    needs: [quick-checks, code-quality]
    
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          path: pr

      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          path: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: pr/package-lock.json

      - name: Build PR branch
        run: |
          cd pr
          npm ci
          npm run build
          cd ..

      - name: Build main branch
        run: |
          cd main
          npm ci
          npm run build
          cd ..

      - name: Compare bundle sizes
        run: |
          # Get sizes
          pr_size=$(du -sb pr/dist | cut -f1)
          main_size=$(du -sb main/dist | cut -f1)
          
          # Calculate difference
          size_diff=$((pr_size - main_size))
          percent_diff=$((size_diff * 100 / main_size))
          
          echo "üìä Bundle Size Report"
          echo "Main branch: $(numfmt --to=iec-i --suffix=B $main_size)"
          echo "PR branch: $(numfmt --to=iec-i --suffix=B $pr_size)"
          echo "Difference: $(numfmt --to=iec-i --suffix=B $size_diff) ($percent_diff%)"
          
          # Warn if bundle size increased significantly
          if [ $percent_diff -gt 10 ]; then
            echo "‚ö†Ô∏è Bundle size increased by more than 10%"
            echo "Please review your changes to ensure no unnecessary dependencies were added"
          elif [ $percent_diff -lt -5 ]; then
            echo "üéâ Great job! Bundle size decreased by ${percent_diff#-}%"
          else
            echo "‚úÖ Bundle size change is within acceptable range"
          fi

  # PR labeling and metadata
  pr-metadata:
    name: PR Metadata
    runs-on: ubuntu-latest
    needs: quick-checks
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Auto-label PR
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true

      - name: Add size label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const additions = pr.additions || 0;
            const deletions = pr.deletions || 0;
            const total = additions + deletions;
            
            let sizeLabel = '';
            if (total < 10) {
              sizeLabel = 'size/XS';
            } else if (total < 50) {
              sizeLabel = 'size/S';
            } else if (total < 200) {
              sizeLabel = 'size/M';
            } else if (total < 500) {
              sizeLabel = 'size/L';
            } else {
              sizeLabel = 'size/XL';
            }
            
            // Remove existing size labels
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            for (const label of labels.data) {
              if (label.name.startsWith('size/')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label.name
                });
              }
            }
            
            // Add new size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [sizeLabel]
            });

  # Final status report
  pr-status-report:
    name: PR Status Report
    runs-on: ubuntu-latest
    needs: [code-quality, build-matrix, performance, pr-metadata]
    if: always()
    
    steps:
      - name: Generate status comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobStatuses = {
              'quick-checks': '${{ needs.quick-checks.result }}',
              'code-quality': '${{ needs.code-quality.result }}',
              'build-matrix': '${{ needs.build-matrix.result }}',
              'performance': '${{ needs.performance.result }}',
              'pr-metadata': '${{ needs.pr-metadata.result }}'
            };
            
            let allPassed = true;
            let statusTable = '| Check | Status |\n|-------|--------|\n';
            
            for (const [job, status] of Object.entries(jobStatuses)) {
              const emoji = status === 'success' ? '‚úÖ' : status === 'failure' ? '‚ùå' : '‚è≠Ô∏è';
              statusTable += `| ${job.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())} | ${emoji} ${status} |\n`;
              if (status === 'failure') allPassed = false;
            }
            
            const comment = `## ü§ñ PR Validation Report
            
            ${allPassed ? '### ‚úÖ All checks passed!' : '### ‚ùå Some checks failed'}
            
            ${statusTable}
            
            ---
            
            <details>
            <summary>üìã Checklist for Contributors</summary>
            
            - [ ] PR title follows conventional commit format
            - [ ] All commits follow conventional commit format
            - [ ] No console.log statements in code
            - [ ] TypeScript types are correct
            - [ ] Build succeeds on all Node versions
            - [ ] Bundle size impact is reasonable
            - [ ] Security vulnerabilities addressed (if any)
            
            </details>
            
            <sub>Generated by PR Validation Workflow ‚Ä¢ [View Workflow](.github/workflows/validate-pr.yml)</sub>`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Validation Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }